name: Encrypt Message

on:
  pull_request:
    types: [opened]

permissions:
  contents: write
  pull-requests: write

jobs:
  encrypt:
    runs-on: ubuntu-latest
      
    steps:
      - name: Comment Step 1
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '✅ Workflow triggered! Starting encryption process...'
            });
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Extract username
        id: user
        run: |
          echo "username=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
      
      - name: Check submission type
        id: check
        run: |
          USERNAME="${{ steps.user.outputs.username }}"
          
          # Check if message file exists (manual submission)
          if [ -f "messages/${USERNAME}.txt" ]; then
            echo "type=plaintext" >> $GITHUB_OUTPUT
            echo "✅ Found plaintext message - will encrypt with GPG"
            exit 0
          fi
          
          # Check if sealed file exists (web interface submission)
          if [ -f "sealed/${USERNAME}/${USERNAME}.gpg" ] || [ -d "sealed/${USERNAME}" ]; then
            echo "type=sealed" >> $GITHUB_OUTPUT
            echo "✅ Found encrypted message - will commit to main"
            exit 0
          fi
          
          # No valid submission found
          echo "❌ Error: No message file found"
          echo "Expected either:"
          echo "  - messages/${USERNAME}.txt (plaintext), or"
          echo "  - sealed/${USERNAME}/*.gpg (encrypted)"
          exit 1
      
      - name: Setup GPG
        if: steps.check.outputs.type == 'plaintext'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y gnupg
      
      - name: Import GPG
        if: steps.check.outputs.type == 'plaintext'
        env:
          KEY: ${{ secrets.GPG_PUBLIC_KEY }}
        run: |
          echo "$KEY" | gpg --import
      
      - name: Encrypt
        if: steps.check.outputs.type == 'plaintext'
        run: |
          USERNAME="${{ steps.user.outputs.username }}"
          mkdir -p "sealed/${USERNAME}"
          TS=$(date +%Y%m%d-%H%M%S)
          
          gpg --encrypt \
              --recipient "time-capsule-2035" \
              --armor \
              --trust-model always \
              --output "sealed/${USERNAME}/${USERNAME}-${TS}.gpg" \
              "messages/${USERNAME}.txt"
          
          cp -r sealed /tmp/sealed-backup
      
      - name: Copy sealed files (web interface)
        if: steps.check.outputs.type == 'sealed'
        run: |
          USERNAME="${{ steps.user.outputs.username }}"
          # Copy sealed files from PR branch
          cp -r sealed /tmp/sealed-backup
      
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Restore
        run: |
          USERNAME="${{ steps.user.outputs.username }}"
          mkdir -p "sealed/${USERNAME}"
          cp -r /tmp/sealed-backup/${USERNAME}/* "sealed/${USERNAME}/"
      
      - name: Commit
        run: |
          USERNAME="${{ steps.user.outputs.username }}"
          git config user.name "Bot"
          git config user.email "bot@local"
          git add sealed/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Sealed @${USERNAME}"
            git push origin main
          fi
      
      - name: Success
        uses: actions/github-script@v7
        with:
          script: |
            const user = '${{ steps.user.outputs.username }}';
            const type = '${{ steps.check.outputs.type }}';
            
            let statusText = type === 'plaintext' 
              ? 'Encrypted with GPG and saved!' 
              : 'Message sealed successfully!';
            
            const message = '## 🎉 Sealed!\n\n' +
              '@' + user + ' - ' + statusText + '\n\n' +
              '✅ Sealed to: sealed/' + user + '/\n' +
              '✅ Unlocks: January 1, 2035\n\n' +
              'Thank you for participating in the GitHub Time Capsule! 🕰️';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
      
      - name: Close
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await new Promise(r => setTimeout(r, 2000));
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              state: 'closed'
            });
