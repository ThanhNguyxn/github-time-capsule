name: Seal Capsule

on:
  pull_request:
    types: [opened]
    branches:
      - main
  pull_request_target:
    types: [opened]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  seal:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Extract username
        id: extract
        run: |
          USERNAME="${{ github.event.pull_request.user.login }}"
          echo "username=$USERNAME" >> $GITHUB_OUTPUT
          echo "Processing message from: @$USERNAME"

      - name: Validate message file
        run: |
          USERNAME="${{ steps.extract.outputs.username }}"
          MESSAGE_FILE="messages/${USERNAME}.txt"
          
          if [ ! -f "$MESSAGE_FILE" ]; then
            echo "Error: $MESSAGE_FILE not found"
            exit 1
          fi
          
          echo "Message file found: $MESSAGE_FILE"

      - name: Setup GPG
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y gnupg
          gpg --version

      - name: Import GPG key
        env:
          GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
        run: |
          if [ -z "$GPG_PUBLIC_KEY" ]; then
            echo "Error: GPG_PUBLIC_KEY secret not configured!"
            exit 1
          fi
          
          echo "$GPG_PUBLIC_KEY" | gpg --import
          gpg --list-keys

      - name: Encrypt message
        run: |
          USERNAME="${{ steps.extract.outputs.username }}"
          MESSAGE_FILE="messages/${USERNAME}.txt"
          
          mkdir -p "sealed/${USERNAME}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          ENCRYPTED_FILE="sealed/${USERNAME}/${USERNAME}-${TIMESTAMP}.gpg"
          
          gpg --encrypt \
              --recipient "time-capsule-2035" \
              --armor \
              --trust-model always \
              --output "$ENCRYPTED_FILE" \
              "$MESSAGE_FILE"
          
          echo "Message encrypted: $ENCRYPTED_FILE"
          ls -lh "$ENCRYPTED_FILE"

      - name: Save encrypted file
        run: |
          cp -r sealed /tmp/sealed-backup
          echo "Saved to /tmp"

      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Restore encrypted file
        run: |
          USERNAME="${{ steps.extract.outputs.username }}"
          mkdir -p sealed
          
          if [ -d "/tmp/sealed-backup/${USERNAME}" ]; then
            mkdir -p "sealed/${USERNAME}"
            cp -r /tmp/sealed-backup/${USERNAME}/* "sealed/${USERNAME}/"
            echo "Restored encrypted files"
            ls -lh "sealed/${USERNAME}/"
          fi

      - name: Commit to main
        run: |
          USERNAME="${{ steps.extract.outputs.username }}"
          
          git config user.name "Time Capsule Bot"
          git config user.email "bot@github-time-capsule.local"
          
          git add sealed/${USERNAME}/
          
          if ! git diff --staged --quiet; then
            git commit -m "Sealed message from @${USERNAME}"
            git push origin main
            echo "Committed and pushed!"
          fi

      - name: Comment success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const username = '${{ steps.extract.outputs.username }}';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## 🎉 Your Message Has Been Sealed!

**@${username}**, your time capsule message has been successfully encrypted and sealed!

### ✅ What Just Happened:
- ✅ Your message was encrypted with AES-256
- ✅ Saved to: \`sealed/${username}/\`
- ✅ Committed to the main branch
- ✅ This PR will be closed automatically

### 🔒 What Happens Next:
- 🔐 Your message is locked until January 1, 2035
- ⏰ It will be automatically decrypted on that date
- 🎉 You and everyone else can read it then!

**Thank you for participating!** ❤️

*🕰️ See you on January 1, 2035!*`
            });

      - name: Close PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              state: 'closed'
            });

