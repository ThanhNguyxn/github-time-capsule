jobs:
  seal-message:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: "Security: Validate PR changes"
        id: validate
        run: |
          echo "Checking what files were changed..."
          
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Count changes outside sealed/
          DANGEROUS_CHANGES=$(echo "$CHANGED_FILES" | grep -v "^sealed/" | grep -v "^$" || true)

          if [ ! -z "$DANGEROUS_CHANGES" ]; then
            echo "❌ SECURITY: PR attempts to modify files outside sealed/ folder!"
            echo "Blocked files:"
            echo "$DANGEROUS_CHANGES"
            echo ""
            echo "⚠️ Only files in sealed/ folder are allowed."
            exit 1
          fi

          echo "✅ Security check passed"

      - name: "Limit submissions to one per day"
        run: |
          USERNAME="${{ github.event.pull_request.user.login }}"
          TODAY=$(date +%Y-%m-%d)
          DAILY_FOLDER="sealed/${USERNAME}/${TODAY}"

          # Check if the user already has a submission for today
          if [ -d "$DAILY_FOLDER" ]; then
            echo "❌ You have already submitted a message today! Only one submission per day is allowed."
            exit 1
          fi

          # Allow repository owner to bypass this restriction
          REPO_OWNER="${{ github.repository_owner }}"
          if [ "$USERNAME" = "$REPO_OWNER" ]; then
            echo "✅ Repository owner is allowed multiple submissions."
          else
            echo "✅ Submission allowed for user: $USERNAME"
          fi

      - name: "Decrypt messages on January 1, 2035"
        if: ${{ github.event.pull_request.merged_at && github.event.pull_request.merged_at == '2035-01-01' }}
        run: |
          echo "Decrypting messages..."
          for file in sealed/**/*.gpg; do
            OUTPUT_FILE="messages/$(basename "$file" .gpg).txt"
            if gpg --batch --yes --decrypt --output "$OUTPUT_FILE" "$file"; then
              echo "✅ Decrypted $file to $OUTPUT_FILE"
            else
              echo "❌ Failed to decrypt $file"
              exit 1
            fi
          done

          echo "✅ All messages decrypted successfully!"

      - name: 💾 Save encrypted file temporarily
        run: |
          USERNAME="${{ github.event.pull_request.user.login }}"
          USER_FOLDER="sealed/${USERNAME}"
          ENCRYPTED_FILE="${USER_FOLDER}/${USERNAME}.gpg"

          # Ensure user folder exists
          if [ ! -d "$USER_FOLDER" ]; then
            echo "Creating user folder $USER_FOLDER..."
            mkdir -p "$USER_FOLDER"
            echo "✅ User folder created successfully!"
          fi

          # Ensure encrypted file is created
          if [ ! -f "$ENCRYPTED_FILE" ]; then
            echo "Creating encrypted file $ENCRYPTED_FILE..."
            touch "$ENCRYPTED_FILE"
            echo "✅ Encrypted file created successfully!"
          fi

          cp "$ENCRYPTED_FILE" "/tmp/${USERNAME}.gpg"
          echo "✅ Saved encrypted file to /tmp"

      - name: 📦 Restore encrypted file
        run: |
          USERNAME="${{ github.event.pull_request.user.login }}"
          USER_FOLDER="sealed/${USERNAME}"
          ENCRYPTED_FILE="${USER_FOLDER}/${USERNAME}.gpg"

          # Ensure temporary file exists before copying
          if [ ! -f "/tmp/${USERNAME}.gpg" ]; then
            echo "❌ Temporary file /tmp/${USERNAME}.gpg does not exist!"
            exit 1
          fi

          cp "/tmp/${USERNAME}.gpg" "$ENCRYPTED_FILE"
          echo "✅ Restored encrypted file to sealed/"

      - name: "Enhanced Error Handling and Logging"
        run: |
          USERNAME="${{ github.event.pull_request.user.login }}"
          USER_FOLDER="sealed/${USERNAME}"
          ENCRYPTED_FILE="${USER_FOLDER}/${USERNAME}.gpg"

          # Ensure encrypted file exists
          if [ ! -f "$ENCRYPTED_FILE" ]; then
            echo "❌ Encrypted file $ENCRYPTED_FILE does not exist!"
            exit 1
          fi

          # Debugging: Check file details
          echo "🔍 File details:"
          ls -l "$ENCRYPTED_FILE"
          stat "$ENCRYPTED_FILE"

          # Update file timestamp to ensure it's detected as modified
          touch "$ENCRYPTED_FILE"

          # Configure Git user identity
          git config user.name "Time Capsule Bot"
          git config user.email "bot@github-time-capsule.local"

          # Commit encrypted .gpg file only
          git add "$ENCRYPTED_FILE"
          git commit -m "🔒 Sealed message from @$USERNAME" --allow-empty
          git push origin main

          echo "✅ Committed encrypted file to main branch"

      - name: 🎉 Close PR regardless of outcome
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              state: 'closed'
            })

